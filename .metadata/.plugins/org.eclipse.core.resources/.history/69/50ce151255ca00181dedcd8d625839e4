package cache;

import java.sql.SQLException;
import java.util.Map;

import db.MySQLService;

/**
 * 
 * A few things to note on this (should i have a secondary index to speed up check times for redis but its incredibly fast so why do that)
 * another thing is instead of secondary indcies should i be getting and then setting? or just override it - seems redundant so like
 * getting last played game checking if it exists then getting it
 *
 */
public class RedisService implements CacheService {

	private RedisConfig rc = new RedisConfig();
	private String userDetails, lastGame;
	private MySQLService db;
	
	private String userName = "username", whenLastGamePlayed = "when_last_game_played", lastGamePlayTime = "last_game_play_time";
			
	/**
	 * 
	 * Pattern / conditions should predict there are more unsafe setUserStats if there is more volatile updates like online/offline
	 * or other things like if we register spotify for example without using getGameType() or other checks
	 * as well as checking other metrics
	 * @throws SQLException 
	 * 
	 */
	
	@Override
	public void setUserStats(String key, Map<String, String> map, boolean pushUpdate) throws SQLException {
		if(pushUpdate == false) {
			rc.commands().hmset(key, map);
			System.out.println("Here1");
		} else {
			rc.commands().hmset(key, map);
			System.out.println("here");
			System.out.println(db.beautifyData(((MySQLService) rc.commands()).getUserLastGameStats(key)));
		}
	}

	@Override
	public String getUser(String uuid, String guild, String user) {
		userDetails = "UserUUID:" + uuid + " => " + "Guild:" + guild + " => " + "UserName:" + user;
		return userDetails;
	}
	
	@Override
	public String getLastPlayed(String key) {
		lastGame = rc.commands().hget(key, "last_game_played");
		return lastGame != null ? lastGame : "none!";
	}
	
	@Override
	public String getLastGamePlayTime(String key) {
		return rc.commands().hget(key, "new_game_start_time");
	}
	
	/**
	 * Get specific user stats from this (logic could be much better like secondary cache to fix and index
	 * so that I don't have to do a second instruction on checking the db or not 
	 * 
	 * What was asked for was:
	 * Read the following data from a redis cache in front of a MySQL database:
	 * 		The last game the Discord user played
	 * 		The last time the Discord user played the game
	 * 		How long the Discord user played the game for (optional)
	 * @throws SQLException 
	 * 
	 * 
	 * Also for here it used to be a public List<Object>
	 * Because when we work with Lettuce thing are of List<Key<String,String>> value when we are working with redis
	 * And that's how it communicates the items / objects in redis.
	 * 
	 * However for performance and high speed we return String instead of List<Object> or List<Key<String,String>> 
	 * It's faster but it goes back to the security issue however since the data here isn't sensitive or private
	 * We have no worries but if it were sensitive data rethink how objects travel between
	 * 
	 * 			final String joined = list.stream()
     *		        .map(item -> "(" + item + ")")
	 *		        .collect(joining(" "));
	 */
	
	public String getUserLastGameStats(String key) throws SQLException {
//		System.out.println(rc.commands().hmget(key, userName, lastGamePlayed, whenLastGamePlayed, lastGamePlayTime).toString());
//		return rc.commands().hmget(key, userName, lastGamePlayed, whenLastGamePlayed, lastGamePlayTime).toString();
		return lastGameExists(key) == true 
				? rc.commands().hmget(key, userName, "last_game_played", whenLastGamePlayed, lastGamePlayTime).toString() : db.getUserLastGameStats(key) != null 
						? db.getUserLastGameStats(key).toString() /* && pushIntoCache */ : "No last game stats!";
//		
//		if(lastGameExists(key)) {
//			System.out.println("From redis");
//			List<Object> list = Arrays.asList(rc.commands().hmget(key, userName, lastGamePlayed, whenLastGamePlayed, lastGamePlayTime));

//			
//			System.out.println(joined + "joined");
//			System.out.println(list + "list");
//			System.out.println();
//			return Arrays.asList(rc.commands().hmget(key, userName, lastGamePlayed, whenLastGamePlayed, lastGamePlayTime));
//			
//			//shoot back or reset data from mysql to redis
//		} else {
//			System.out.println("From mysql");
//			System.out.println(db.getUserLastGameStats(userUUID));
//			return db.getUserLastGameStats(userUUID);
//		}
		
//		System.out.println(rc.commands().hmget(key, userName, lastGamePlayed, whenLastGamePlayed, lastGamePlayTime));
//		return rc.commands().hmget(key, userName, lastGamePlayed, whenLastGamePlayed, lastGamePlayTime);

	}
	
	@Override
	public boolean lastGameExists(String key) {
		return rc.commands().hexists(key, "last_game_played");
	}

	@Override
	public void removeLastGameStats(String key) {
		rc.commands().hdel(key, "last_game_played");
	}
	
	@Override
	public Map<String, String> getUserStats(String key) {
		return rc.commands().hgetall(key);
	}

	@Override
	public boolean exists(String key) {
		// 1 means it exists in the redis cache
		if(rc.commands().exists(key) == 1) {
			return true;
		} else {
			return false;
		}
	}

	@Override
	public String removeUserFromServer(String key) {
		rc.commands().del(key);
		return key;
	}
}